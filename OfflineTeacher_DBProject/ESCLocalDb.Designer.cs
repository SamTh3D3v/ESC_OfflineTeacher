//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OfflineTeacher_DBProject {
    
    
    public partial class ESCLocalDbClientSyncProvider : Microsoft.Synchronization.Data.SqlServerCe.SqlCeClientSyncProvider {
        
        public ESCLocalDbClientSyncProvider() {
            this.ConnectionString = global::OfflineTeacher_DBProject.Properties.Settings.Default.ClientSGSDBConnectionString;
        }
        
        public ESCLocalDbClientSyncProvider(string connectionString) {
            this.ConnectionString = connectionString;
        }
    }
    
    public partial class ESCLocalDbSyncAgent : Microsoft.Synchronization.SyncAgent {
        
        private ANNEESSyncTable _aNNEESSyncTable;
        
        private CATEGORIESSyncTable _cATEGORIESSyncTable;
        
        private ENSEIGNANTSSyncTable _eNSEIGNANTSSyncTable;
        
        private ETUDIANTSSyncTable _eTUDIANTSSyncTable;
        
        private EXAMENSSyncTable _eXAMENSSyncTable;
        
        private EXAMENS_ANNEES_MODES_ETUDESSyncTable _eXAMENS_ANNEES_MODES_ETUDESSyncTable;
        
        private GROUPESSyncTable _gROUPESSyncTable;
        
        private MATIERESSyncTable _mATIERESSyncTable;
        
        private NOTESyncTable _nOTESyncTable;
        
        private NOTE_DETTESyncTable _nOTE_DETTESyncTable;
        
        private NOTES_EXAMENSyncTable _nOTES_EXAMENSyncTable;
        
        private SECTIONSSyncTable _sECTIONSSyncTable;
        
        private SPECIALITESSyncTable _sPECIALITESSyncTable;
        
        private SPECIALITES_ANNEES_MODES_ETUDESSyncTable _sPECIALITES_ANNEES_MODES_ETUDESSyncTable;
        
        private SPECIALITES_MATIERESSyncTable _sPECIALITES_MATIERESSyncTable;
        
        private MODES_ETUDESSyncTable _mODES_ETUDESSyncTable;
        
        private ENS_SPEMATSyncTable _eNS_SPEMATSyncTable;
        
        private USERS_SPECIALITESSyncTable _uSERS_SPECIALITESSyncTable;
        
        private ETUDESSyncTable _eTUDESSyncTable;
        
        private LOGSyncTable _lOGSyncTable;
        
        partial void OnInitialized();
        
        public ESCLocalDbSyncAgent() {
            this.InitializeSyncProviders();
            this.InitializeSyncTables();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ANNEESSyncTable ANNEES {
            get {
                return this._aNNEESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._aNNEESSyncTable);
                this._aNNEESSyncTable = value;
                this.Configuration.SyncTables.Add(this._aNNEESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CATEGORIESSyncTable CATEGORIES {
            get {
                return this._cATEGORIESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._cATEGORIESSyncTable);
                this._cATEGORIESSyncTable = value;
                this.Configuration.SyncTables.Add(this._cATEGORIESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ENSEIGNANTSSyncTable ENSEIGNANTS {
            get {
                return this._eNSEIGNANTSSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._eNSEIGNANTSSyncTable);
                this._eNSEIGNANTSSyncTable = value;
                this.Configuration.SyncTables.Add(this._eNSEIGNANTSSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ETUDIANTSSyncTable ETUDIANTS {
            get {
                return this._eTUDIANTSSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._eTUDIANTSSyncTable);
                this._eTUDIANTSSyncTable = value;
                this.Configuration.SyncTables.Add(this._eTUDIANTSSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EXAMENSSyncTable EXAMENS {
            get {
                return this._eXAMENSSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._eXAMENSSyncTable);
                this._eXAMENSSyncTable = value;
                this.Configuration.SyncTables.Add(this._eXAMENSSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EXAMENS_ANNEES_MODES_ETUDESSyncTable EXAMENS_ANNEES_MODES_ETUDES {
            get {
                return this._eXAMENS_ANNEES_MODES_ETUDESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._eXAMENS_ANNEES_MODES_ETUDESSyncTable);
                this._eXAMENS_ANNEES_MODES_ETUDESSyncTable = value;
                this.Configuration.SyncTables.Add(this._eXAMENS_ANNEES_MODES_ETUDESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GROUPESSyncTable GROUPES {
            get {
                return this._gROUPESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._gROUPESSyncTable);
                this._gROUPESSyncTable = value;
                this.Configuration.SyncTables.Add(this._gROUPESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MATIERESSyncTable MATIERES {
            get {
                return this._mATIERESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._mATIERESSyncTable);
                this._mATIERESSyncTable = value;
                this.Configuration.SyncTables.Add(this._mATIERESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOTESyncTable NOTE {
            get {
                return this._nOTESyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._nOTESyncTable);
                this._nOTESyncTable = value;
                this.Configuration.SyncTables.Add(this._nOTESyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOTE_DETTESyncTable NOTE_DETTE {
            get {
                return this._nOTE_DETTESyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._nOTE_DETTESyncTable);
                this._nOTE_DETTESyncTable = value;
                this.Configuration.SyncTables.Add(this._nOTE_DETTESyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOTES_EXAMENSyncTable NOTES_EXAMEN {
            get {
                return this._nOTES_EXAMENSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._nOTES_EXAMENSyncTable);
                this._nOTES_EXAMENSyncTable = value;
                this.Configuration.SyncTables.Add(this._nOTES_EXAMENSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SECTIONSSyncTable SECTIONS {
            get {
                return this._sECTIONSSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._sECTIONSSyncTable);
                this._sECTIONSSyncTable = value;
                this.Configuration.SyncTables.Add(this._sECTIONSSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIALITESSyncTable SPECIALITES {
            get {
                return this._sPECIALITESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._sPECIALITESSyncTable);
                this._sPECIALITESSyncTable = value;
                this.Configuration.SyncTables.Add(this._sPECIALITESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIALITES_ANNEES_MODES_ETUDESSyncTable SPECIALITES_ANNEES_MODES_ETUDES {
            get {
                return this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable);
                this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable = value;
                this.Configuration.SyncTables.Add(this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIALITES_MATIERESSyncTable SPECIALITES_MATIERES {
            get {
                return this._sPECIALITES_MATIERESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._sPECIALITES_MATIERESSyncTable);
                this._sPECIALITES_MATIERESSyncTable = value;
                this.Configuration.SyncTables.Add(this._sPECIALITES_MATIERESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MODES_ETUDESSyncTable MODES_ETUDES {
            get {
                return this._mODES_ETUDESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._mODES_ETUDESSyncTable);
                this._mODES_ETUDESSyncTable = value;
                this.Configuration.SyncTables.Add(this._mODES_ETUDESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ENS_SPEMATSyncTable ENS_SPEMAT {
            get {
                return this._eNS_SPEMATSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._eNS_SPEMATSyncTable);
                this._eNS_SPEMATSyncTable = value;
                this.Configuration.SyncTables.Add(this._eNS_SPEMATSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USERS_SPECIALITESSyncTable USERS_SPECIALITES {
            get {
                return this._uSERS_SPECIALITESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._uSERS_SPECIALITESSyncTable);
                this._uSERS_SPECIALITESSyncTable = value;
                this.Configuration.SyncTables.Add(this._uSERS_SPECIALITESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ETUDESSyncTable ETUDES {
            get {
                return this._eTUDESSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._eTUDESSyncTable);
                this._eTUDESSyncTable = value;
                this.Configuration.SyncTables.Add(this._eTUDESSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LOGSyncTable LOG {
            get {
                return this._lOGSyncTable;
            }
            set {
                this.Configuration.SyncTables.Remove(this._lOGSyncTable);
                this._lOGSyncTable = value;
                this.Configuration.SyncTables.Add(this._lOGSyncTable);
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncProviders() {
            // Create SyncProviders.
            this.RemoteProvider = new ESCLocalDbServerSyncProvider();
            this.LocalProvider = new ESCLocalDbClientSyncProvider();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncTables() {
            // Create SyncTables.
            this._aNNEESSyncTable = new ANNEESSyncTable();
            this._aNNEESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("ANNEESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._aNNEESSyncTable);
            this._cATEGORIESSyncTable = new CATEGORIESSyncTable();
            this._cATEGORIESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("CATEGORIESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._cATEGORIESSyncTable);
            this._eNSEIGNANTSSyncTable = new ENSEIGNANTSSyncTable();
            this._eNSEIGNANTSSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("ENSEIGNANTSSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._eNSEIGNANTSSyncTable);
            this._eTUDIANTSSyncTable = new ETUDIANTSSyncTable();
            this._eTUDIANTSSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("ETUDIANTSSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._eTUDIANTSSyncTable);
            this._eXAMENSSyncTable = new EXAMENSSyncTable();
            this._eXAMENSSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("EXAMENSSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._eXAMENSSyncTable);
            this._eXAMENS_ANNEES_MODES_ETUDESSyncTable = new EXAMENS_ANNEES_MODES_ETUDESSyncTable();
            this._eXAMENS_ANNEES_MODES_ETUDESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("EXAMENS_ANNEES_MODES_ETUDESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._eXAMENS_ANNEES_MODES_ETUDESSyncTable);
            this._gROUPESSyncTable = new GROUPESSyncTable();
            this._gROUPESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("GROUPESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._gROUPESSyncTable);
            this._mATIERESSyncTable = new MATIERESSyncTable();
            this._mATIERESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("MATIERESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._mATIERESSyncTable);
            this._nOTESyncTable = new NOTESyncTable();
            this._nOTESyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("NOTESyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._nOTESyncTable);
            this._nOTE_DETTESyncTable = new NOTE_DETTESyncTable();
            this._nOTE_DETTESyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("NOTE_DETTESyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._nOTE_DETTESyncTable);
            this._nOTES_EXAMENSyncTable = new NOTES_EXAMENSyncTable();
            this._nOTES_EXAMENSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("NOTES_EXAMENSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._nOTES_EXAMENSyncTable);
            this._sECTIONSSyncTable = new SECTIONSSyncTable();
            this._sECTIONSSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("SECTIONSSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._sECTIONSSyncTable);
            this._sPECIALITESSyncTable = new SPECIALITESSyncTable();
            this._sPECIALITESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("SPECIALITESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._sPECIALITESSyncTable);
            this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable = new SPECIALITES_ANNEES_MODES_ETUDESSyncTable();
            this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("SPECIALITES_ANNEES_MODES_ETUDESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._sPECIALITES_ANNEES_MODES_ETUDESSyncTable);
            this._sPECIALITES_MATIERESSyncTable = new SPECIALITES_MATIERESSyncTable();
            this._sPECIALITES_MATIERESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("SPECIALITES_MATIERESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._sPECIALITES_MATIERESSyncTable);
            this._mODES_ETUDESSyncTable = new MODES_ETUDESSyncTable();
            this._mODES_ETUDESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("MODES_ETUDESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._mODES_ETUDESSyncTable);
            this._eNS_SPEMATSyncTable = new ENS_SPEMATSyncTable();
            this._eNS_SPEMATSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("ENS_SPEMATSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._eNS_SPEMATSyncTable);
            this._uSERS_SPECIALITESSyncTable = new USERS_SPECIALITESSyncTable();
            this._uSERS_SPECIALITESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("USERS_SPECIALITESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._uSERS_SPECIALITESSyncTable);
            this._eTUDESSyncTable = new ETUDESSyncTable();
            this._eTUDESSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("ETUDESSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._eTUDESSyncTable);
            this._lOGSyncTable = new LOGSyncTable();
            this._lOGSyncTable.SyncGroup = new Microsoft.Synchronization.Data.SyncGroup("LOGSyncTableSyncGroup");
            this.Configuration.SyncTables.Add(this._lOGSyncTable);
        }
        
        public partial class ANNEESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public ANNEESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "ANNEES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class CATEGORIESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public CATEGORIESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "CATEGORIES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class ENSEIGNANTSSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public ENSEIGNANTSSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "ENSEIGNANTS";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class ETUDIANTSSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public ETUDIANTSSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "ETUDIANTS";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class EXAMENSSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public EXAMENSSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "EXAMENS";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class EXAMENS_ANNEES_MODES_ETUDESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public EXAMENS_ANNEES_MODES_ETUDESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "EXAMENS_ANNEES_MODES_ETUDES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class GROUPESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public GROUPESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "GROUPES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class MATIERESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public MATIERESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "MATIERES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class NOTESyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public NOTESyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "NOTE";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class NOTE_DETTESyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public NOTE_DETTESyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "NOTE_DETTE";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class NOTES_EXAMENSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public NOTES_EXAMENSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "NOTES_EXAMEN";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class SECTIONSSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public SECTIONSSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "SECTIONS";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class SPECIALITESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public SPECIALITESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "SPECIALITES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class SPECIALITES_ANNEES_MODES_ETUDESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public SPECIALITES_ANNEES_MODES_ETUDESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "SPECIALITES_ANNEES_MODES_ETUDES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class SPECIALITES_MATIERESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public SPECIALITES_MATIERESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "SPECIALITES_MATIERES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class MODES_ETUDESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public MODES_ETUDESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "MODES_ETUDES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class ENS_SPEMATSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public ENS_SPEMATSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "ENS_SPEMAT";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class USERS_SPECIALITESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public USERS_SPECIALITESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "USERS_SPECIALITES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class ETUDESSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public ETUDESSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "ETUDES";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
        
        public partial class LOGSyncTable : Microsoft.Synchronization.Data.SyncTable {
            
            partial void OnInitialized();
            
            public LOGSyncTable() {
                this.InitializeTableOptions();
                this.OnInitialized();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitializeTableOptions() {
                this.TableName = "LOG";
                this.CreationOption = Microsoft.Synchronization.Data.TableCreationOption.DropExistingOrCreateNewTable;
            }
        }
    }
}
namespace OfflineTeacher_DBProject {
    
    
    public partial class ANNEESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ANNEESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ANNEESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.ANNEES ([ANNEE_UNIVERSITAIRE], [DATE_DEB_INSCRIPTION], [DATE_FIN_INSCRIPTION], [DATE_DEB_ETUDES], [DATE_FIN_ETUDES], [DATE_DEB_RATTRAPAGE], [DATE_FIN_RATTRAPAGE], [LOCK_SYNTHESE], [LOCK_RATTRAPAGE], [NBRE_NEW_INSCRITS], [LOCK_ANNEE], [LastEditDate], [CreationDate]) VALUES (@ANNEE_UNIVERSITAIRE, @DATE_DEB_INSCRIPTION, @DATE_FIN_INSCRIPTION, @DATE_DEB_ETUDES, @DATE_FIN_ETUDES, @DATE_DEB_RATTRAPAGE, @DATE_FIN_RATTRAPAGE, @LOCK_SYNTHESE, @LOCK_RATTRAPAGE, @NBRE_NEW_INSCRITS, @LOCK_ANNEE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEB_INSCRIPTION", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN_INSCRIPTION", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEB_ETUDES", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN_ETUDES", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEB_RATTRAPAGE", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN_RATTRAPAGE", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCK_SYNTHESE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCK_RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NBRE_NEW_INSCRITS", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCK_ANNEE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ANNEESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.ANNEES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE) AND (" +
                "@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sy" +
                "nc_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ANNEESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.ANNEES SET [DATE_DEB_INSCRIPTION] = @DATE_DEB_INSCRIPTION, [DATE_FIN_INSCRIPTION] = @DATE_FIN_INSCRIPTION, [DATE_DEB_ETUDES] = @DATE_DEB_ETUDES, [DATE_FIN_ETUDES] = @DATE_FIN_ETUDES, [DATE_DEB_RATTRAPAGE] = @DATE_DEB_RATTRAPAGE, [DATE_FIN_RATTRAPAGE] = @DATE_FIN_RATTRAPAGE, [LOCK_SYNTHESE] = @LOCK_SYNTHESE, [LOCK_RATTRAPAGE] = @LOCK_RATTRAPAGE, [NBRE_NEW_INSCRITS] = @NBRE_NEW_INSCRITS, [LOCK_ANNEE] = @LOCK_ANNEE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEB_INSCRIPTION", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN_INSCRIPTION", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEB_ETUDES", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN_ETUDES", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEB_RATTRAPAGE", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN_RATTRAPAGE", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCK_SYNTHESE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCK_RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NBRE_NEW_INSCRITS", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCK_ANNEE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ANNEESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [DATE_DEB_INSCRIPTION], [DATE_FIN_INSCRIPTION], [DATE_DEB_ETUDES], [DATE_FIN_ETUDES], [DATE_DEB_RATTRAPAGE], [DATE_FIN_RATTRAPAGE], [LOCK_SYNTHESE], [LOCK_RATTRAPAGE], [NBRE_NEW_INSCRITS], [LOCK_ANNEE], [LastEditDate], [CreationDate] FROM dbo.ANNEES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            // ANNEESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [DATE_DEB_INSCRIPTION], [DATE_FIN_INSCRIPTION], [DATE_DEB_ETUDES], [DATE_FIN_ETUDES], [DATE_DEB_RATTRAPAGE], [DATE_FIN_RATTRAPAGE], [LOCK_SYNTHESE], [LOCK_RATTRAPAGE], [NBRE_NEW_INSCRITS], [LOCK_ANNEE], [LastEditDate], [CreationDate] FROM dbo.ANNEES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ANNEESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [DATE_DEB_INSCRIPTION], [DATE_FIN_INSCRIPTION], [DATE_DEB_ETUDES], [DATE_FIN_ETUDES], [DATE_DEB_RATTRAPAGE], [DATE_FIN_RATTRAPAGE], [LOCK_SYNTHESE], [LOCK_RATTRAPAGE], [NBRE_NEW_INSCRITS], [LOCK_ANNEE], [LastEditDate], [CreationDate] FROM dbo.ANNEES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "ANNEES";
        }
    }
    
    public partial class CATEGORIESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public CATEGORIESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // CATEGORIESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.CATEGORIES ON INSERT INTO dbo.CATEGORIES ([ID_CATEGORIE], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [CreationDate]) VALUES (@ID_CATEGORIE, @DESIGNATION, @DESIGNATION_LATIN, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.CATEGORIES OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CATEGORIE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // CATEGORIESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.CATEGORIES WHERE ([ID_CATEGORIE] = @ID_CATEGORIE) AND (@sync_forc" +
                "e_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_cou" +
                "nt = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CATEGORIE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // CATEGORIESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.CATEGORIES SET [DESIGNATION] = @DESIGNATION, [DESIGNATION_LATIN] = @DESIGNATION_LATIN, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_CATEGORIE] = @ID_CATEGORIE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CATEGORIE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // CATEGORIESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_CATEGORIE], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [Creat" +
                "ionDate] FROM dbo.CATEGORIES WHERE ([ID_CATEGORIE] = @ID_CATEGORIE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CATEGORIE", System.Data.SqlDbType.Int));
            // CATEGORIESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID_CATEGORIE], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [Creat" +
                "ionDate] FROM dbo.CATEGORIES WHERE ([CreationDate] > @sync_last_received_anchor " +
                "AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // CATEGORIESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_CATEGORIE], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [CreationDate] FROM dbo.CATEGORIES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "CATEGORIES";
        }
    }
    
    public partial class ENSEIGNANTSSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ENSEIGNANTSSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ENSEIGNANTSSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.ENSEIGNANTS ON INSERT INTO dbo.ENSEIGNANTS ([ID_ENSEIGNANT], [NOM], [PRENOM], [NOM_LATIN], [PRENOM_LATIN], [STATUT], [ACTIF], [DEFICITE_ENSEIGNEMENT], [DEFICITE_ENCADREMENT], [CHARGE_SURVEILLANCE], [DEFICITE_SURVEILLANCE], [ID_USER], [LastEditDate], [CreationDate]) VALUES (@ID_ENSEIGNANT, @NOM, @PRENOM, @NOM_LATIN, @PRENOM_LATIN, @STATUT, @ACTIF, @DEFICITE_ENSEIGNEMENT, @DEFICITE_ENCADREMENT, @CHARGE_SURVEILLANCE, @DEFICITE_SURVEILLANCE, @ID_USER, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.ENSEIGNANTS OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATUT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACTIF", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DEFICITE_ENSEIGNEMENT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DEFICITE_ENCADREMENT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CHARGE_SURVEILLANCE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DEFICITE_SURVEILLANCE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ENSEIGNANTSSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.ENSEIGNANTS WHERE ([ID_ENSEIGNANT] = @ID_ENSEIGNANT) AND (@sync_f" +
                "orce_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_" +
                "count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ENSEIGNANTSSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.ENSEIGNANTS SET [NOM] = @NOM, [PRENOM] = @PRENOM, [NOM_LATIN] = @NOM_LATIN, [PRENOM_LATIN] = @PRENOM_LATIN, [STATUT] = @STATUT, [ACTIF] = @ACTIF, [DEFICITE_ENSEIGNEMENT] = @DEFICITE_ENSEIGNEMENT, [DEFICITE_ENCADREMENT] = @DEFICITE_ENCADREMENT, [CHARGE_SURVEILLANCE] = @CHARGE_SURVEILLANCE, [DEFICITE_SURVEILLANCE] = @DEFICITE_SURVEILLANCE, [ID_USER] = @ID_USER, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_ENSEIGNANT] = @ID_ENSEIGNANT) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STATUT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACTIF", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DEFICITE_ENSEIGNEMENT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DEFICITE_ENCADREMENT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CHARGE_SURVEILLANCE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DEFICITE_SURVEILLANCE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ENSEIGNANTSSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ENSEIGNANT], [NOM], [PRENOM], [NOM_LATIN], [PRENOM_LATIN], [STATUT], [ACTIF], [DEFICITE_ENSEIGNEMENT], [DEFICITE_ENCADREMENT], [CHARGE_SURVEILLANCE], [DEFICITE_SURVEILLANCE], [ID_USER], [LastEditDate], [CreationDate] FROM dbo.ENSEIGNANTS WHERE ([ID_ENSEIGNANT] = @ID_ENSEIGNANT)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            // ENSEIGNANTSSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_ENSEIGNANT], [NOM], [PRENOM], [NOM_LATIN], [PRENOM_LATIN], [STATUT], [ACTIF], [DEFICITE_ENSEIGNEMENT], [DEFICITE_ENCADREMENT], [CHARGE_SURVEILLANCE], [DEFICITE_SURVEILLANCE], [ID_USER], [LastEditDate], [CreationDate] FROM dbo.ENSEIGNANTS WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ENSEIGNANTSSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ENSEIGNANT], [NOM], [PRENOM], [NOM_LATIN], [PRENOM_LATIN], [STATUT], [ACTIF], [DEFICITE_ENSEIGNEMENT], [DEFICITE_ENCADREMENT], [CHARGE_SURVEILLANCE], [DEFICITE_SURVEILLANCE], [ID_USER], [LastEditDate], [CreationDate] FROM dbo.ENSEIGNANTS WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "ENSEIGNANTS";
        }
    }
    
    public partial class ETUDIANTSSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ETUDIANTSSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ETUDIANTSSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = " SET IDENTITY_INSERT dbo.ETUDIANTS ON INSERT INTO dbo.ETUDIANTS ([ID_ETUDIANT], [" +
                "MATRICULE], [NOM], [NOM_LATIN], [NOM_JEUNE_FILLE], [NOM_JEUNE_FILLE_LATIN], [PRE" +
                "NOM], [PRENOM_LATIN], [LIEU_NAISSANCE], [LIEU_NAISSANCE_LATIN], [WILAYA_NAISSANC" +
                "E], [PAYS_NAISSANCE], [SEX], [PRENOM_PERE], [PRENOM_PERE_LATIN], [NOM_PRENOM_MER" +
                "E], [NOM_PRENOM_MERE_LATIN], [NATIONALITE], [ETAT_CIVIL], [NOMBRE_ENFANT], [ETAT" +
                "_SN], [ADRESSE], [ADRESSE_LATIN], [WILAYA_ADRESSE], [TEL], [EMAIL], [GROUPAGE], " +
                "[MALADIE_CHRONIQUE], [MALADIE_CHRONIQUE_LATIN], [PROFESSION_PERE], [PROFESSION_P" +
                "ERE_LATIN], [PROFESSION_MERE], [PROFESSION_MERE_LATIN], [MATRICULE_BAC], [SESSIO" +
                "N_BAC], [WILAYA_BAC], [FILIERE_BAC], [MENTION_BAC], [MOYENNE_BAC], [NUMERO_CHOIX" +
                "], [ENTREE_DATE], [ENTREE_TRANSFERT], [SORTIE_NATURE], [SORTIE_ANNEE_UNIVERSITAI" +
                "RE], [SORTIE_SPECIALITE], [SORTIE_DATE], [SORTIE_UNIVERSITE], [NOTE_CURSUS], [NO" +
                "TE_MEMOIRE], [MENTION_MEMOIRE], [PERIODE_MEMOIRE], [MOYENNE_GENERALE_MEMOIRE], [" +
                "CITY_UNIVERSITAIRE], [NUMERO_SERIE_DIPLOME], [DT_NAISSANCE], [PHOTO], [GRADE], [" +
                "TYPE_ETUDIANT], [NUMERO_DIPLOME], [NUMERO_DIPLOME_PROVISOIRE], [LastEditDate], [" +
                "CreationDate]) VALUES (@ID_ETUDIANT, @MATRICULE, @NOM, @NOM_LATIN, @NOM_JEUNE_FI" +
                "LLE, @NOM_JEUNE_FILLE_LATIN, @PRENOM, @PRENOM_LATIN, @LIEU_NAISSANCE, @LIEU_NAIS" +
                "SANCE_LATIN, @WILAYA_NAISSANCE, @PAYS_NAISSANCE, @SEX, @PRENOM_PERE, @PRENOM_PER" +
                "E_LATIN, @NOM_PRENOM_MERE, @NOM_PRENOM_MERE_LATIN, @NATIONALITE, @ETAT_CIVIL, @N" +
                "OMBRE_ENFANT, @ETAT_SN, @ADRESSE, @ADRESSE_LATIN, @WILAYA_ADRESSE, @TEL, @EMAIL," +
                " @GROUPAGE, @MALADIE_CHRONIQUE, @MALADIE_CHRONIQUE_LATIN, @PROFESSION_PERE, @PRO" +
                "FESSION_PERE_LATIN, @PROFESSION_MERE, @PROFESSION_MERE_LATIN, @MATRICULE_BAC, @S" +
                "ESSION_BAC, @WILAYA_BAC, @FILIERE_BAC, @MENTION_BAC, @MOYENNE_BAC, @NUMERO_CHOIX" +
                ", @ENTREE_DATE, @ENTREE_TRANSFERT, @SORTIE_NATURE, @SORTIE_ANNEE_UNIVERSITAIRE, " +
                "@SORTIE_SPECIALITE, @SORTIE_DATE, @SORTIE_UNIVERSITE, @NOTE_CURSUS, @NOTE_MEMOIR" +
                "E, @MENTION_MEMOIRE, @PERIODE_MEMOIRE, @MOYENNE_GENERALE_MEMOIRE, @CITY_UNIVERSI" +
                "TAIRE, @NUMERO_SERIE_DIPLOME, @DT_NAISSANCE, @PHOTO, @GRADE, @TYPE_ETUDIANT, @NU" +
                "MERO_DIPLOME, @NUMERO_DIPLOME_PROVISOIRE, @LastEditDate, @CreationDate) SET @syn" +
                "c_row_count = @@rowcount SET IDENTITY_INSERT dbo.ETUDIANTS OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MATRICULE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_JEUNE_FILLE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_JEUNE_FILLE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIEU_NAISSANCE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIEU_NAISSANCE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WILAYA_NAISSANCE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PAYS_NAISSANCE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SEX", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_PERE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_PERE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_PRENOM_MERE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_PRENOM_MERE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NATIONALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_CIVIL", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOMBRE_ENFANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_SN", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WILAYA_ADRESSE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GROUPAGE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MALADIE_CHRONIQUE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MALADIE_CHRONIQUE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_PERE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_PERE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_MERE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_MERE_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MATRICULE_BAC", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SESSION_BAC", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WILAYA_BAC", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FILIERE_BAC", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MENTION_BAC", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_BAC", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_CHOIX", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ENTREE_DATE", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ENTREE_TRANSFERT", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_NATURE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_SPECIALITE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_DATE", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_UNIVERSITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_CURSUS", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_MEMOIRE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MENTION_MEMOIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PERIODE_MEMOIRE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE_MEMOIRE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CITY_UNIVERSITAIRE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_SERIE_DIPLOME", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DT_NAISSANCE", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHOTO", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GRADE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE_ETUDIANT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_DIPLOME", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_DIPLOME_PROVISOIRE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ETUDIANTSSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.ETUDIANTS WHERE ([MATRICULE] = @MATRICULE) AND (@sync_force_write" +
                " = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@" +
                "rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MATRICULE", System.Data.SqlDbType.VarChar));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ETUDIANTSSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = "UPDATE dbo.ETUDIANTS SET [NOM] = @NOM, [NOM_LATIN] = @NOM_LATIN, [NOM_JEUNE_FILLE" +
                "] = @NOM_JEUNE_FILLE, [NOM_JEUNE_FILLE_LATIN] = @NOM_JEUNE_FILLE_LATIN, [PRENOM]" +
                " = @PRENOM, [PRENOM_LATIN] = @PRENOM_LATIN, [LIEU_NAISSANCE] = @LIEU_NAISSANCE, " +
                "[LIEU_NAISSANCE_LATIN] = @LIEU_NAISSANCE_LATIN, [WILAYA_NAISSANCE] = @WILAYA_NAI" +
                "SSANCE, [PAYS_NAISSANCE] = @PAYS_NAISSANCE, [SEX] = @SEX, [PRENOM_PERE] = @PRENO" +
                "M_PERE, [PRENOM_PERE_LATIN] = @PRENOM_PERE_LATIN, [NOM_PRENOM_MERE] = @NOM_PRENO" +
                "M_MERE, [NOM_PRENOM_MERE_LATIN] = @NOM_PRENOM_MERE_LATIN, [NATIONALITE] = @NATIO" +
                "NALITE, [ETAT_CIVIL] = @ETAT_CIVIL, [NOMBRE_ENFANT] = @NOMBRE_ENFANT, [ETAT_SN] " +
                "= @ETAT_SN, [ADRESSE] = @ADRESSE, [ADRESSE_LATIN] = @ADRESSE_LATIN, [WILAYA_ADRE" +
                "SSE] = @WILAYA_ADRESSE, [TEL] = @TEL, [EMAIL] = @EMAIL, [GROUPAGE] = @GROUPAGE, " +
                "[MALADIE_CHRONIQUE] = @MALADIE_CHRONIQUE, [MALADIE_CHRONIQUE_LATIN] = @MALADIE_C" +
                "HRONIQUE_LATIN, [PROFESSION_PERE] = @PROFESSION_PERE, [PROFESSION_PERE_LATIN] = " +
                "@PROFESSION_PERE_LATIN, [PROFESSION_MERE] = @PROFESSION_MERE, [PROFESSION_MERE_L" +
                "ATIN] = @PROFESSION_MERE_LATIN, [MATRICULE_BAC] = @MATRICULE_BAC, [SESSION_BAC] " +
                "= @SESSION_BAC, [WILAYA_BAC] = @WILAYA_BAC, [FILIERE_BAC] = @FILIERE_BAC, [MENTI" +
                "ON_BAC] = @MENTION_BAC, [MOYENNE_BAC] = @MOYENNE_BAC, [NUMERO_CHOIX] = @NUMERO_C" +
                "HOIX, [ENTREE_DATE] = @ENTREE_DATE, [ENTREE_TRANSFERT] = @ENTREE_TRANSFERT, [SOR" +
                "TIE_NATURE] = @SORTIE_NATURE, [SORTIE_ANNEE_UNIVERSITAIRE] = @SORTIE_ANNEE_UNIVE" +
                "RSITAIRE, [SORTIE_SPECIALITE] = @SORTIE_SPECIALITE, [SORTIE_DATE] = @SORTIE_DATE" +
                ", [SORTIE_UNIVERSITE] = @SORTIE_UNIVERSITE, [NOTE_CURSUS] = @NOTE_CURSUS, [NOTE_" +
                "MEMOIRE] = @NOTE_MEMOIRE, [MENTION_MEMOIRE] = @MENTION_MEMOIRE, [PERIODE_MEMOIRE" +
                "] = @PERIODE_MEMOIRE, [MOYENNE_GENERALE_MEMOIRE] = @MOYENNE_GENERALE_MEMOIRE, [C" +
                "ITY_UNIVERSITAIRE] = @CITY_UNIVERSITAIRE, [NUMERO_SERIE_DIPLOME] = @NUMERO_SERIE" +
                "_DIPLOME, [DT_NAISSANCE] = @DT_NAISSANCE, [PHOTO] = @PHOTO, [GRADE] = @GRADE, [T" +
                "YPE_ETUDIANT] = @TYPE_ETUDIANT, [NUMERO_DIPLOME] = @NUMERO_DIPLOME, [NUMERO_DIPL" +
                "OME_PROVISOIRE] = @NUMERO_DIPLOME_PROVISOIRE, [LastEditDate] = @LastEditDate, [C" +
                "reationDate] = @CreationDate WHERE ([MATRICULE] = @MATRICULE) AND (@sync_force_w" +
                "rite = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count " +
                "= @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_JEUNE_FILLE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_JEUNE_FILLE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIEU_NAISSANCE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIEU_NAISSANCE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WILAYA_NAISSANCE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PAYS_NAISSANCE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SEX", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_PERE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_PERE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_PRENOM_MERE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_PRENOM_MERE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NATIONALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_CIVIL", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOMBRE_ENFANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_SN", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WILAYA_ADRESSE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GROUPAGE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MALADIE_CHRONIQUE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MALADIE_CHRONIQUE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_PERE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_PERE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_MERE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PROFESSION_MERE_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MATRICULE_BAC", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SESSION_BAC", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WILAYA_BAC", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FILIERE_BAC", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MENTION_BAC", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_BAC", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_CHOIX", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ENTREE_DATE", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ENTREE_TRANSFERT", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_NATURE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_SPECIALITE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_DATE", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SORTIE_UNIVERSITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_CURSUS", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_MEMOIRE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MENTION_MEMOIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PERIODE_MEMOIRE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE_MEMOIRE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CITY_UNIVERSITAIRE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_SERIE_DIPLOME", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DT_NAISSANCE", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHOTO", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GRADE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE_ETUDIANT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_DIPLOME", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO_DIPLOME_PROVISOIRE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MATRICULE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ETUDIANTSSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ETUDIANT], [MATRICULE], [NOM], [NOM_LATIN], [NOM_JEUNE_FILLE], [NOM_JEUNE_FILLE_LATIN], [PRENOM], [PRENOM_LATIN], [LIEU_NAISSANCE], [LIEU_NAISSANCE_LATIN], [WILAYA_NAISSANCE], [PAYS_NAISSANCE], [SEX], [PRENOM_PERE], [PRENOM_PERE_LATIN], [NOM_PRENOM_MERE], [NOM_PRENOM_MERE_LATIN], [NATIONALITE], [ETAT_CIVIL], [NOMBRE_ENFANT], [ETAT_SN], [ADRESSE], [ADRESSE_LATIN], [WILAYA_ADRESSE], [TEL], [EMAIL], [GROUPAGE], [MALADIE_CHRONIQUE], [MALADIE_CHRONIQUE_LATIN], [PROFESSION_PERE], [PROFESSION_PERE_LATIN], [PROFESSION_MERE], [PROFESSION_MERE_LATIN], [MATRICULE_BAC], [SESSION_BAC], [WILAYA_BAC], [FILIERE_BAC], [MENTION_BAC], [MOYENNE_BAC], [NUMERO_CHOIX], [ENTREE_DATE], [ENTREE_TRANSFERT], [SORTIE_NATURE], [SORTIE_ANNEE_UNIVERSITAIRE], [SORTIE_SPECIALITE], [SORTIE_DATE], [SORTIE_UNIVERSITE], [NOTE_CURSUS], [NOTE_MEMOIRE], [MENTION_MEMOIRE], [PERIODE_MEMOIRE], [MOYENNE_GENERALE_MEMOIRE], [CITY_UNIVERSITAIRE], [NUMERO_SERIE_DIPLOME], [DT_NAISSANCE], [PHOTO], [GRADE], [TYPE_ETUDIANT], [NUMERO_DIPLOME], [NUMERO_DIPLOME_PROVISOIRE], [LastEditDate], [CreationDate] FROM dbo.ETUDIANTS WHERE ([MATRICULE] = @MATRICULE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MATRICULE", System.Data.SqlDbType.VarChar));
            // ETUDIANTSSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_ETUDIANT], [MATRICULE], [NOM], [NOM_LATIN], [NOM_JEUNE_FILLE], [NOM_JEUNE_FILLE_LATIN], [PRENOM], [PRENOM_LATIN], [LIEU_NAISSANCE], [LIEU_NAISSANCE_LATIN], [WILAYA_NAISSANCE], [PAYS_NAISSANCE], [SEX], [PRENOM_PERE], [PRENOM_PERE_LATIN], [NOM_PRENOM_MERE], [NOM_PRENOM_MERE_LATIN], [NATIONALITE], [ETAT_CIVIL], [NOMBRE_ENFANT], [ETAT_SN], [ADRESSE], [ADRESSE_LATIN], [WILAYA_ADRESSE], [TEL], [EMAIL], [GROUPAGE], [MALADIE_CHRONIQUE], [MALADIE_CHRONIQUE_LATIN], [PROFESSION_PERE], [PROFESSION_PERE_LATIN], [PROFESSION_MERE], [PROFESSION_MERE_LATIN], [MATRICULE_BAC], [SESSION_BAC], [WILAYA_BAC], [FILIERE_BAC], [MENTION_BAC], [MOYENNE_BAC], [NUMERO_CHOIX], [ENTREE_DATE], [ENTREE_TRANSFERT], [SORTIE_NATURE], [SORTIE_ANNEE_UNIVERSITAIRE], [SORTIE_SPECIALITE], [SORTIE_DATE], [SORTIE_UNIVERSITE], [NOTE_CURSUS], [NOTE_MEMOIRE], [MENTION_MEMOIRE], [PERIODE_MEMOIRE], [MOYENNE_GENERALE_MEMOIRE], [CITY_UNIVERSITAIRE], [NUMERO_SERIE_DIPLOME], [DT_NAISSANCE], [PHOTO], [GRADE], [TYPE_ETUDIANT], [NUMERO_DIPLOME], [NUMERO_DIPLOME_PROVISOIRE], [LastEditDate], [CreationDate] FROM dbo.ETUDIANTS WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ETUDIANTSSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ETUDIANT], [MATRICULE], [NOM], [NOM_LATIN], [NOM_JEUNE_FILLE], [NOM_JEUNE_FILLE_LATIN], [PRENOM], [PRENOM_LATIN], [LIEU_NAISSANCE], [LIEU_NAISSANCE_LATIN], [WILAYA_NAISSANCE], [PAYS_NAISSANCE], [SEX], [PRENOM_PERE], [PRENOM_PERE_LATIN], [NOM_PRENOM_MERE], [NOM_PRENOM_MERE_LATIN], [NATIONALITE], [ETAT_CIVIL], [NOMBRE_ENFANT], [ETAT_SN], [ADRESSE], [ADRESSE_LATIN], [WILAYA_ADRESSE], [TEL], [EMAIL], [GROUPAGE], [MALADIE_CHRONIQUE], [MALADIE_CHRONIQUE_LATIN], [PROFESSION_PERE], [PROFESSION_PERE_LATIN], [PROFESSION_MERE], [PROFESSION_MERE_LATIN], [MATRICULE_BAC], [SESSION_BAC], [WILAYA_BAC], [FILIERE_BAC], [MENTION_BAC], [MOYENNE_BAC], [NUMERO_CHOIX], [ENTREE_DATE], [ENTREE_TRANSFERT], [SORTIE_NATURE], [SORTIE_ANNEE_UNIVERSITAIRE], [SORTIE_SPECIALITE], [SORTIE_DATE], [SORTIE_UNIVERSITE], [NOTE_CURSUS], [NOTE_MEMOIRE], [MENTION_MEMOIRE], [PERIODE_MEMOIRE], [MOYENNE_GENERALE_MEMOIRE], [CITY_UNIVERSITAIRE], [NUMERO_SERIE_DIPLOME], [DT_NAISSANCE], [PHOTO], [GRADE], [TYPE_ETUDIANT], [NUMERO_DIPLOME], [NUMERO_DIPLOME_PROVISOIRE], [LastEditDate], [CreationDate] FROM dbo.ETUDIANTS WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "ETUDIANTS";
        }
    }
    
    public partial class EXAMENSSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public EXAMENSSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // EXAMENSSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.EXAMENS ON INSERT INTO dbo.EXAMENS ([ID_EXAMEN], [CODE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [LastEditDate], [CreationDate]) VALUES (@ID_EXAMEN, @CODE, @DESIGNATION, @DESIGNATION_LATIN, @LAST_USED, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.EXAMENS OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_USED", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // EXAMENSSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.EXAMENS WHERE ([ID_EXAMEN] = @ID_EXAMEN) AND (@sync_force_write =" +
                " 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@ro" +
                "wcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // EXAMENSSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.EXAMENS SET [CODE] = @CODE, [DESIGNATION] = @DESIGNATION, [DESIGNATION_LATIN] = @DESIGNATION_LATIN, [LAST_USED] = @LAST_USED, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_EXAMEN] = @ID_EXAMEN) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_USED", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // EXAMENSSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_EXAMEN], [CODE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [Las" +
                "tEditDate], [CreationDate] FROM dbo.EXAMENS WHERE ([ID_EXAMEN] = @ID_EXAMEN)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            // EXAMENSSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID_EXAMEN], [CODE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [Las" +
                "tEditDate], [CreationDate] FROM dbo.EXAMENS WHERE ([CreationDate] > @sync_last_r" +
                "eceived_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // EXAMENSSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_EXAMEN], [CODE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [LastEditDate], [CreationDate] FROM dbo.EXAMENS WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "EXAMENS";
        }
    }
    
    public partial class EXAMENS_ANNEES_MODES_ETUDESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public EXAMENS_ANNEES_MODES_ETUDESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // EXAMENS_ANNEES_MODES_ETUDESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.EXAMENS_ANNEES_MODES_ETUDES ([ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MODE_ETUDE], [ID_EXAMEN], [LOCKED], [DATE_DEBUT], [DATE_FIN], [LastEditDate], [CreationDate]) VALUES (@ANNEE_UNIVERSITAIRE, @ID_SPECIALITE, @ID_MODE_ETUDE, @ID_EXAMEN, @LOCKED, @DATE_DEBUT, @DATE_FIN, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCKED", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEBUT", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // EXAMENS_ANNEES_MODES_ETUDESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.EXAMENS_ANNEES_MODES_ETUDES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MODE_ETUDE] = @ID_MODE_ETUDE AND [ID_EXAMEN] = @ID_EXAMEN) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // EXAMENS_ANNEES_MODES_ETUDESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.EXAMENS_ANNEES_MODES_ETUDES SET [LOCKED] = @LOCKED, [DATE_DEBUT] = @DATE_DEBUT, [DATE_FIN] = @DATE_FIN, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MODE_ETUDE] = @ID_MODE_ETUDE AND [ID_EXAMEN] = @ID_EXAMEN) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCKED", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_DEBUT", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FIN", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // EXAMENS_ANNEES_MODES_ETUDESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MODE_ETUDE], [ID_EXAMEN], [LOCKED], [DATE_DEBUT], [DATE_FIN], [LastEditDate], [CreationDate] FROM dbo.EXAMENS_ANNEES_MODES_ETUDES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MODE_ETUDE] = @ID_MODE_ETUDE AND [ID_EXAMEN] = @ID_EXAMEN)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            // EXAMENS_ANNEES_MODES_ETUDESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MODE_ETUDE], [ID_EXAMEN], [LOCKED], [DATE_DEBUT], [DATE_FIN], [LastEditDate], [CreationDate] FROM dbo.EXAMENS_ANNEES_MODES_ETUDES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // EXAMENS_ANNEES_MODES_ETUDESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MODE_ETUDE], [ID_EXAMEN], [LOCKED], [DATE_DEBUT], [DATE_FIN], [LastEditDate], [CreationDate] FROM dbo.EXAMENS_ANNEES_MODES_ETUDES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "EXAMENS_ANNEES_MODES_ETUDES";
        }
    }
    
    public partial class GROUPESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public GROUPESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // GROUPESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.GROUPES ON INSERT INTO dbo.GROUPES ([ID_GROUPE], [ID_SECTION], [DESIGNATION_GROUPE], [LastEditDate], [CreationDate]) VALUES (@ID_GROUPE, @ID_SECTION, @DESIGNATION_GROUPE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.GROUPES OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_GROUPE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // GROUPESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.GROUPES WHERE ([ID_GROUPE] = @ID_GROUPE) AND (@sync_force_write =" +
                " 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@ro" +
                "wcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // GROUPESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.GROUPES SET [ID_SECTION] = @ID_SECTION, [DESIGNATION_GROUPE] = @DESIGNATION_GROUPE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_GROUPE] = @ID_GROUPE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_GROUPE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // GROUPESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_GROUPE], [ID_SECTION], [DESIGNATION_GROUPE], [LastEditDate], [Creation" +
                "Date] FROM dbo.GROUPES WHERE ([ID_GROUPE] = @ID_GROUPE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            // GROUPESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID_GROUPE], [ID_SECTION], [DESIGNATION_GROUPE], [LastEditDate], [Creation" +
                "Date] FROM dbo.GROUPES WHERE ([CreationDate] > @sync_last_received_anchor AND [C" +
                "reationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // GROUPESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = "SELECT [ID_GROUPE], [ID_SECTION], [DESIGNATION_GROUPE], [LastEditDate], [Creation" +
                "Date] FROM dbo.GROUPES WHERE ([LastEditDate] > @sync_last_received_anchor AND [L" +
                "astEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_recei" +
                "ved_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "GROUPES";
        }
    }
    
    public partial class MATIERESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public MATIERESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // MATIERESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.MATIERES ON INSERT INTO dbo.MATIERES ([ID_MATIERE], [CODE], [DESIGNATION], [SHORT_DESIGNATION], [DESIGNATION_LATIN], [SHORT_DESIGNATION_LATIN], [JUMELE], [LOCKED], [CONCOURS], [LastEditDate], [CreationDate]) VALUES (@ID_MATIERE, @CODE, @DESIGNATION, @SHORT_DESIGNATION, @DESIGNATION_LATIN, @SHORT_DESIGNATION_LATIN, @JUMELE, @LOCKED, @CONCOURS, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.MATIERES OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SHORT_DESIGNATION", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SHORT_DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JUMELE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCKED", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONCOURS", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // MATIERESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.MATIERES WHERE ([ID_MATIERE] = @ID_MATIERE) AND (@sync_force_writ" +
                "e = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @" +
                "@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // MATIERESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.MATIERES SET [CODE] = @CODE, [DESIGNATION] = @DESIGNATION, [SHORT_DESIGNATION] = @SHORT_DESIGNATION, [DESIGNATION_LATIN] = @DESIGNATION_LATIN, [SHORT_DESIGNATION_LATIN] = @SHORT_DESIGNATION_LATIN, [JUMELE] = @JUMELE, [LOCKED] = @LOCKED, [CONCOURS] = @CONCOURS, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SHORT_DESIGNATION", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SHORT_DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JUMELE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOCKED", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONCOURS", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // MATIERESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_MATIERE], [CODE], [DESIGNATION], [SHORT_DESIGNATION], [DESIGNATION_LAT" +
                "IN], [SHORT_DESIGNATION_LATIN], [JUMELE], [LOCKED], [CONCOURS], [LastEditDate], " +
                "[CreationDate] FROM dbo.MATIERES WHERE ([ID_MATIERE] = @ID_MATIERE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            // MATIERESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_MATIERE], [CODE], [DESIGNATION], [SHORT_DESIGNATION], [DESIGNATION_LATIN], [SHORT_DESIGNATION_LATIN], [JUMELE], [LOCKED], [CONCOURS], [LastEditDate], [CreationDate] FROM dbo.MATIERES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // MATIERESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_MATIERE], [CODE], [DESIGNATION], [SHORT_DESIGNATION], [DESIGNATION_LATIN], [SHORT_DESIGNATION_LATIN], [JUMELE], [LOCKED], [CONCOURS], [LastEditDate], [CreationDate] FROM dbo.MATIERES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "MATIERES";
        }
    }
    
    public partial class NOTESyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public NOTESyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // NOTESyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.NOTE ([ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [NOTE_SYNTHESE], [NOTE_RATTRAPAGE], [MOYENNE_JUIN], [MOYENNE_SEPT], [OLD], [MOYENNE_GENERALE], [ID_SYSTEME_NOTATION], [DETTE], [ACQUISE], [COMPENSEE], [RATTRAPAGE], [LastEditDate], [CreationDate]) VALUES (@ID_ETUDIANT, @ANNEE_UNIVERSITAIRE, @ID_MATIERE, @NOTE_SYNTHESE, @NOTE_RATTRAPAGE, @MOYENNE_JUIN, @MOYENNE_SEPT, @OLD, @MOYENNE_GENERALE, @ID_SYSTEME_NOTATION, @DETTE, @ACQUISE, @COMPENSEE, @RATTRAPAGE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_SYNTHESE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_JUIN", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_SEPT", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OLD", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SYSTEME_NOTATION", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DETTE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACQUISE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPENSEE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // NOTESyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.NOTE WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE" +
                "] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write " +
                "= 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@r" +
                "owcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // NOTESyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.NOTE SET [NOTE_SYNTHESE] = @NOTE_SYNTHESE, [NOTE_RATTRAPAGE] = @NOTE_RATTRAPAGE, [MOYENNE_JUIN] = @MOYENNE_JUIN, [MOYENNE_SEPT] = @MOYENNE_SEPT, [OLD] = @OLD, [MOYENNE_GENERALE] = @MOYENNE_GENERALE, [ID_SYSTEME_NOTATION] = @ID_SYSTEME_NOTATION, [DETTE] = @DETTE, [ACQUISE] = @ACQUISE, [COMPENSEE] = @COMPENSEE, [RATTRAPAGE] = @RATTRAPAGE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_SYNTHESE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_JUIN", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_SEPT", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OLD", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SYSTEME_NOTATION", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DETTE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACQUISE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPENSEE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // NOTESyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [NOTE_SYNTHESE], [NOTE_RATTRAPAGE], [MOYENNE_JUIN], [MOYENNE_SEPT], [OLD], [MOYENNE_GENERALE], [ID_SYSTEME_NOTATION], [DETTE], [ACQUISE], [COMPENSEE], [RATTRAPAGE], [LastEditDate], [CreationDate] FROM dbo.NOTE WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            // NOTESyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [NOTE_SYNTHESE], [NOTE_RATTRAPAGE], [MOYENNE_JUIN], [MOYENNE_SEPT], [OLD], [MOYENNE_GENERALE], [ID_SYSTEME_NOTATION], [DETTE], [ACQUISE], [COMPENSEE], [RATTRAPAGE], [LastEditDate], [CreationDate] FROM dbo.NOTE WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // NOTESyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [NOTE_SYNTHESE], [NOTE_RATTRAPAGE], [MOYENNE_JUIN], [MOYENNE_SEPT], [OLD], [MOYENNE_GENERALE], [ID_SYSTEME_NOTATION], [DETTE], [ACQUISE], [COMPENSEE], [RATTRAPAGE], [LastEditDate], [CreationDate] FROM dbo.NOTE WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "NOTE";
        }
    }
    
    public partial class NOTE_DETTESyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public NOTE_DETTESyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // NOTE_DETTESyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.NOTE_DETTE ([ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ANNEE_PASSAGE_DETTE], [NOTE], [NOTE_RATTRAPAGE], [ACQUISE], [RATTRAPAGE], [MOYENNE_GENERALE], [MOYENNE_JUIN], [MOYENNE_SEPT], [COMPENSEE], [DETTE], [SESSION_SPECIALE], [NOTE_SESSION_SPECIALE], [LastEditDate], [CreationDate]) VALUES (@ID_ETUDIANT, @ANNEE_UNIVERSITAIRE, @ID_MATIERE, @ANNEE_PASSAGE_DETTE, @NOTE, @NOTE_RATTRAPAGE, @ACQUISE, @RATTRAPAGE, @MOYENNE_GENERALE, @MOYENNE_JUIN, @MOYENNE_SEPT, @COMPENSEE, @DETTE, @SESSION_SPECIALE, @NOTE_SESSION_SPECIALE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_PASSAGE_DETTE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACQUISE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_JUIN", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_SEPT", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPENSEE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DETTE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SESSION_SPECIALE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_SESSION_SPECIALE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // NOTE_DETTESyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.NOTE_DETTE WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE AND [ANNEE_PASSAGE_DETTE] = @ANNEE_PASSAGE_DETTE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_PASSAGE_DETTE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // NOTE_DETTESyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.NOTE_DETTE SET [NOTE] = @NOTE, [NOTE_RATTRAPAGE] = @NOTE_RATTRAPAGE, [ACQUISE] = @ACQUISE, [RATTRAPAGE] = @RATTRAPAGE, [MOYENNE_GENERALE] = @MOYENNE_GENERALE, [MOYENNE_JUIN] = @MOYENNE_JUIN, [MOYENNE_SEPT] = @MOYENNE_SEPT, [COMPENSEE] = @COMPENSEE, [DETTE] = @DETTE, [SESSION_SPECIALE] = @SESSION_SPECIALE, [NOTE_SESSION_SPECIALE] = @NOTE_SESSION_SPECIALE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE AND [ANNEE_PASSAGE_DETTE] = @ANNEE_PASSAGE_DETTE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ACQUISE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_JUIN", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_SEPT", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COMPENSEE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DETTE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SESSION_SPECIALE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_SESSION_SPECIALE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_PASSAGE_DETTE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // NOTE_DETTESyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ANNEE_PASSAGE_DETTE], [NOTE], [NOTE_RATTRAPAGE], [ACQUISE], [RATTRAPAGE], [MOYENNE_GENERALE], [MOYENNE_JUIN], [MOYENNE_SEPT], [COMPENSEE], [DETTE], [SESSION_SPECIALE], [NOTE_SESSION_SPECIALE], [LastEditDate], [CreationDate] FROM dbo.NOTE_DETTE WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE AND [ANNEE_PASSAGE_DETTE] = @ANNEE_PASSAGE_DETTE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_PASSAGE_DETTE", System.Data.SqlDbType.Int));
            // NOTE_DETTESyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ANNEE_PASSAGE_DETTE], [NOTE], [NOTE_RATTRAPAGE], [ACQUISE], [RATTRAPAGE], [MOYENNE_GENERALE], [MOYENNE_JUIN], [MOYENNE_SEPT], [COMPENSEE], [DETTE], [SESSION_SPECIALE], [NOTE_SESSION_SPECIALE], [LastEditDate], [CreationDate] FROM dbo.NOTE_DETTE WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // NOTE_DETTESyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ANNEE_PASSAGE_DETTE], [NOTE], [NOTE_RATTRAPAGE], [ACQUISE], [RATTRAPAGE], [MOYENNE_GENERALE], [MOYENNE_JUIN], [MOYENNE_SEPT], [COMPENSEE], [DETTE], [SESSION_SPECIALE], [NOTE_SESSION_SPECIALE], [LastEditDate], [CreationDate] FROM dbo.NOTE_DETTE WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "NOTE_DETTE";
        }
    }
    
    public partial class NOTES_EXAMENSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public NOTES_EXAMENSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // NOTES_EXAMENSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.NOTES_EXAMEN ([ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ID_EXAMEN], [NOTE], [LastEditDate], [CreationDate]) VALUES (@ID_ETUDIANT, @ANNEE_UNIVERSITAIRE, @ID_MATIERE, @ID_EXAMEN, @NOTE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // NOTES_EXAMENSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.NOTES_EXAMEN WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE AND [ID_EXAMEN] = @ID_EXAMEN) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // NOTES_EXAMENSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.NOTES_EXAMEN SET [NOTE] = @NOTE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE AND [ID_EXAMEN] = @ID_EXAMEN) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // NOTES_EXAMENSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ID_EXAMEN], [NOTE], [LastEditDate], [CreationDate] FROM dbo.NOTES_EXAMEN WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_MATIERE] = @ID_MATIERE AND [ID_EXAMEN] = @ID_EXAMEN)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_EXAMEN", System.Data.SqlDbType.Int));
            // NOTES_EXAMENSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ID_EXAMEN], [NOTE], [" +
                "LastEditDate], [CreationDate] FROM dbo.NOTES_EXAMEN WHERE ([CreationDate] > @syn" +
                "c_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // NOTES_EXAMENSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_MATIERE], [ID_EXAMEN], [NOTE], [LastEditDate], [CreationDate] FROM dbo.NOTES_EXAMEN WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "NOTES_EXAMEN";
        }
    }
    
    public partial class SECTIONSSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public SECTIONSSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // SECTIONSSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.SECTIONS ON INSERT INTO dbo.SECTIONS ([ID_SECTION], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [DESIGNATION_SECTION], [LastEditDate], [CreationDate]) VALUES (@ID_SECTION, @ANNEE_UNIVERSITAIRE, @ID_SPECIALITE, @DESIGNATION_SECTION, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.SECTIONS OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_SECTION", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // SECTIONSSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.SECTIONS WHERE ([ID_SECTION] = @ID_SECTION) AND (@sync_force_writ" +
                "e = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @" +
                "@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // SECTIONSSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.SECTIONS SET [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE, [ID_SPECIALITE] = @ID_SPECIALITE, [DESIGNATION_SECTION] = @DESIGNATION_SECTION, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_SECTION] = @ID_SECTION) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_SECTION", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // SECTIONSSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_SECTION], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [DESIGNATION_SECTION" +
                "], [LastEditDate], [CreationDate] FROM dbo.SECTIONS WHERE ([ID_SECTION] = @ID_SE" +
                "CTION)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            // SECTIONSSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID_SECTION], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [DESIGNATION_SECTION" +
                "], [LastEditDate], [CreationDate] FROM dbo.SECTIONS WHERE ([CreationDate] > @syn" +
                "c_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // SECTIONSSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_SECTION], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [DESIGNATION_SECTION], [LastEditDate], [CreationDate] FROM dbo.SECTIONS WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "SECTIONS";
        }
    }
    
    public partial class SPECIALITESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public SPECIALITESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // SPECIALITESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.SPECIALITES ON INSERT INTO dbo.SPECIALITES ([ID_SPECIALITE], [CODE_SPECIALITE], [ANNEE_SCOLAIRE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [SPECIALITE_AVANT], [SPECIALITE_APRES], [CONTIENT_CHOIX], [SPEC_FIN_CURSUS], [CONTIENT_EXAMEN_SORTIE], [ID_POLE], [LastEditDate], [CreationDate]) VALUES (@ID_SPECIALITE, @CODE_SPECIALITE, @ANNEE_SCOLAIRE, @DESIGNATION, @DESIGNATION_LATIN, @LAST_USED, @SPECIALITE_AVANT, @SPECIALITE_APRES, @CONTIENT_CHOIX, @SPEC_FIN_CURSUS, @CONTIENT_EXAMEN_SORTIE, @ID_POLE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.SPECIALITES OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SPECIALITE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_SCOLAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_USED", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECIALITE_AVANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECIALITE_APRES", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONTIENT_CHOIX", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPEC_FIN_CURSUS", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONTIENT_EXAMEN_SORTIE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_POLE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // SPECIALITESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.SPECIALITES WHERE ([ID_SPECIALITE] = @ID_SPECIALITE) AND (@sync_f" +
                "orce_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_" +
                "count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // SPECIALITESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.SPECIALITES SET [CODE_SPECIALITE] = @CODE_SPECIALITE, [ANNEE_SCOLAIRE] = @ANNEE_SCOLAIRE, [DESIGNATION] = @DESIGNATION, [DESIGNATION_LATIN] = @DESIGNATION_LATIN, [LAST_USED] = @LAST_USED, [SPECIALITE_AVANT] = @SPECIALITE_AVANT, [SPECIALITE_APRES] = @SPECIALITE_APRES, [CONTIENT_CHOIX] = @CONTIENT_CHOIX, [SPEC_FIN_CURSUS] = @SPEC_FIN_CURSUS, [CONTIENT_EXAMEN_SORTIE] = @CONTIENT_EXAMEN_SORTIE, [ID_POLE] = @ID_POLE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_SPECIALITE] = @ID_SPECIALITE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SPECIALITE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_SCOLAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LAST_USED", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECIALITE_AVANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECIALITE_APRES", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONTIENT_CHOIX", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPEC_FIN_CURSUS", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CONTIENT_EXAMEN_SORTIE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_POLE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // SPECIALITESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_SPECIALITE], [CODE_SPECIALITE], [ANNEE_SCOLAIRE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [SPECIALITE_AVANT], [SPECIALITE_APRES], [CONTIENT_CHOIX], [SPEC_FIN_CURSUS], [CONTIENT_EXAMEN_SORTIE], [ID_POLE], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES WHERE ([ID_SPECIALITE] = @ID_SPECIALITE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            // SPECIALITESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_SPECIALITE], [CODE_SPECIALITE], [ANNEE_SCOLAIRE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [SPECIALITE_AVANT], [SPECIALITE_APRES], [CONTIENT_CHOIX], [SPEC_FIN_CURSUS], [CONTIENT_EXAMEN_SORTIE], [ID_POLE], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // SPECIALITESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_SPECIALITE], [CODE_SPECIALITE], [ANNEE_SCOLAIRE], [DESIGNATION], [DESIGNATION_LATIN], [LAST_USED], [SPECIALITE_AVANT], [SPECIALITE_APRES], [CONTIENT_CHOIX], [SPEC_FIN_CURSUS], [CONTIENT_EXAMEN_SORTIE], [ID_POLE], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "SPECIALITES";
        }
    }
    
    public partial class SPECIALITES_ANNEES_MODES_ETUDESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public SPECIALITES_ANNEES_MODES_ETUDESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // SPECIALITES_ANNEES_MODES_ETUDESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.SPECIALITES_ANNEES_MODES_ETUDES ([ID_MODE_ETUDE], [ID_SPECIALITE], [ANNEE_UNIVERSITAIRE], [NUMERO], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [CreationDate]) VALUES (@ID_MODE_ETUDE, @ID_SPECIALITE, @ANNEE_UNIVERSITAIRE, @NUMERO, @DESIGNATION, @DESIGNATION_LATIN, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // SPECIALITES_ANNEES_MODES_ETUDESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.SPECIALITES_ANNEES_MODES_ETUDES WHERE ([ID_MODE_ETUDE] = @ID_MODE_ETUDE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // SPECIALITES_ANNEES_MODES_ETUDESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.SPECIALITES_ANNEES_MODES_ETUDES SET [NUMERO] = @NUMERO, [DESIGNATION] = @DESIGNATION, [DESIGNATION_LATIN] = @DESIGNATION_LATIN, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_MODE_ETUDE] = @ID_MODE_ETUDE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // SPECIALITES_ANNEES_MODES_ETUDESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_MODE_ETUDE], [ID_SPECIALITE], [ANNEE_UNIVERSITAIRE], [NUMERO], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES_ANNEES_MODES_ETUDES WHERE ([ID_MODE_ETUDE] = @ID_MODE_ETUDE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            // SPECIALITES_ANNEES_MODES_ETUDESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_MODE_ETUDE], [ID_SPECIALITE], [ANNEE_UNIVERSITAIRE], [NUMERO], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES_ANNEES_MODES_ETUDES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // SPECIALITES_ANNEES_MODES_ETUDESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_MODE_ETUDE], [ID_SPECIALITE], [ANNEE_UNIVERSITAIRE], [NUMERO], [DESIGNATION], [DESIGNATION_LATIN], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES_ANNEES_MODES_ETUDES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "SPECIALITES_ANNEES_MODES_ETUDES";
        }
    }
    
    public partial class SPECIALITES_MATIERESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public SPECIALITES_MATIERESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // SPECIALITES_MATIERESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.SPECIALITES_MATIERES ([ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [COEFFICIENT], [COEFFICIENT_SYNTHESE], [COEFFICIENT_RATTRAPAGE], [VOLUME_HORAIRE], [FACULTATIF], [SPECIFIQUE], [ID_CATEGORIE], [VOLUME_HORAIE_ETUDIANT], [CREDIT], [TYPE], [NOTE_ELIMINATOIRE], [MOYENNE_PASSAGE], [ID_MODE_ETUDE], [ID_UNITE_COMPENSATION_ANNEE], [MOYENNE_ENTREE_RATTRAPAGE], [LastEditDate], [CreationDate]) VALUES (@ANNEE_UNIVERSITAIRE, @ID_SPECIALITE, @ID_MATIERE, @COEFFICIENT, @COEFFICIENT_SYNTHESE, @COEFFICIENT_RATTRAPAGE, @VOLUME_HORAIRE, @FACULTATIF, @SPECIFIQUE, @ID_CATEGORIE, @VOLUME_HORAIE_ETUDIANT, @CREDIT, @TYPE, @NOTE_ELIMINATOIRE, @MOYENNE_PASSAGE, @ID_MODE_ETUDE, @ID_UNITE_COMPENSATION_ANNEE, @MOYENNE_ENTREE_RATTRAPAGE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COEFFICIENT", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COEFFICIENT_SYNTHESE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COEFFICIENT_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VOLUME_HORAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FACULTATIF", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECIFIQUE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CATEGORIE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VOLUME_HORAIE_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CREDIT", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_ELIMINATOIRE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_PASSAGE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_UNITE_COMPENSATION_ANNEE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_ENTREE_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // SPECIALITES_MATIERESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.SPECIALITES_MATIERES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // SPECIALITES_MATIERESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.SPECIALITES_MATIERES SET [COEFFICIENT] = @COEFFICIENT, [COEFFICIENT_SYNTHESE] = @COEFFICIENT_SYNTHESE, [COEFFICIENT_RATTRAPAGE] = @COEFFICIENT_RATTRAPAGE, [VOLUME_HORAIRE] = @VOLUME_HORAIRE, [FACULTATIF] = @FACULTATIF, [SPECIFIQUE] = @SPECIFIQUE, [ID_CATEGORIE] = @ID_CATEGORIE, [VOLUME_HORAIE_ETUDIANT] = @VOLUME_HORAIE_ETUDIANT, [CREDIT] = @CREDIT, [TYPE] = @TYPE, [NOTE_ELIMINATOIRE] = @NOTE_ELIMINATOIRE, [MOYENNE_PASSAGE] = @MOYENNE_PASSAGE, [ID_MODE_ETUDE] = @ID_MODE_ETUDE, [ID_UNITE_COMPENSATION_ANNEE] = @ID_UNITE_COMPENSATION_ANNEE, [MOYENNE_ENTREE_RATTRAPAGE] = @MOYENNE_ENTREE_RATTRAPAGE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COEFFICIENT", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COEFFICIENT_SYNTHESE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@COEFFICIENT_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VOLUME_HORAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FACULTATIF", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SPECIFIQUE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_CATEGORIE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VOLUME_HORAIE_ETUDIANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CREDIT", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_ELIMINATOIRE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_PASSAGE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_UNITE_COMPENSATION_ANNEE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_ENTREE_RATTRAPAGE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // SPECIALITES_MATIERESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [COEFFICIENT], [COEFFICIENT_SYNTHESE], [COEFFICIENT_RATTRAPAGE], [VOLUME_HORAIRE], [FACULTATIF], [SPECIFIQUE], [ID_CATEGORIE], [VOLUME_HORAIE_ETUDIANT], [CREDIT], [TYPE], [NOTE_ELIMINATOIRE], [MOYENNE_PASSAGE], [ID_MODE_ETUDE], [ID_UNITE_COMPENSATION_ANNEE], [MOYENNE_ENTREE_RATTRAPAGE], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES_MATIERES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MATIERE] = @ID_MATIERE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            // SPECIALITES_MATIERESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [COEFFICIENT], [COEFFICIENT_SYNTHESE], [COEFFICIENT_RATTRAPAGE], [VOLUME_HORAIRE], [FACULTATIF], [SPECIFIQUE], [ID_CATEGORIE], [VOLUME_HORAIE_ETUDIANT], [CREDIT], [TYPE], [NOTE_ELIMINATOIRE], [MOYENNE_PASSAGE], [ID_MODE_ETUDE], [ID_UNITE_COMPENSATION_ANNEE], [MOYENNE_ENTREE_RATTRAPAGE], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES_MATIERES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // SPECIALITES_MATIERESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [COEFFICIENT], [COEFFICIENT_SYNTHESE], [COEFFICIENT_RATTRAPAGE], [VOLUME_HORAIRE], [FACULTATIF], [SPECIFIQUE], [ID_CATEGORIE], [VOLUME_HORAIE_ETUDIANT], [CREDIT], [TYPE], [NOTE_ELIMINATOIRE], [MOYENNE_PASSAGE], [ID_MODE_ETUDE], [ID_UNITE_COMPENSATION_ANNEE], [MOYENNE_ENTREE_RATTRAPAGE], [LastEditDate], [CreationDate] FROM dbo.SPECIALITES_MATIERES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "SPECIALITES_MATIERES";
        }
    }
    
    public partial class MODES_ETUDESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public MODES_ETUDESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // MODES_ETUDESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @" SET IDENTITY_INSERT dbo.MODES_ETUDES ON INSERT INTO dbo.MODES_ETUDES ([ID_MODE_ETUDE], [TYPE], [DESIGNATION], [DESIGNATION_LATIN], [CREDIT_TOTAL], [ANNEE_UNIVERSITAIRE], [NUMERO], [LastEditDate], [CreationDate]) VALUES (@ID_MODE_ETUDE, @TYPE, @DESIGNATION, @DESIGNATION_LATIN, @CREDIT_TOTAL, @ANNEE_UNIVERSITAIRE, @NUMERO, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount SET IDENTITY_INSERT dbo.MODES_ETUDES OFF ";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE", System.Data.SqlDbType.Char));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.NVarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CREDIT_TOTAL", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // MODES_ETUDESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.MODES_ETUDES WHERE ([ID_MODE_ETUDE] = @ID_MODE_ETUDE) AND (@sync_" +
                "force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row" +
                "_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // MODES_ETUDESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.MODES_ETUDES SET [TYPE] = @TYPE, [DESIGNATION] = @DESIGNATION, [DESIGNATION_LATIN] = @DESIGNATION_LATIN, [CREDIT_TOTAL] = @CREDIT_TOTAL, [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE, [NUMERO] = @NUMERO, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_MODE_ETUDE] = @ID_MODE_ETUDE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TYPE", System.Data.SqlDbType.Char));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION_LATIN", System.Data.SqlDbType.NVarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CREDIT_TOTAL", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUMERO", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // MODES_ETUDESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_MODE_ETUDE], [TYPE], [DESIGNATION], [DESIGNATION_LATIN], [CREDIT_TOTAL" +
                "], [ANNEE_UNIVERSITAIRE], [NUMERO], [LastEditDate], [CreationDate] FROM dbo.MODE" +
                "S_ETUDES WHERE ([ID_MODE_ETUDE] = @ID_MODE_ETUDE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MODE_ETUDE", System.Data.SqlDbType.Int));
            // MODES_ETUDESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_MODE_ETUDE], [TYPE], [DESIGNATION], [DESIGNATION_LATIN], [CREDIT_TOTAL], [ANNEE_UNIVERSITAIRE], [NUMERO], [LastEditDate], [CreationDate] FROM dbo.MODES_ETUDES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // MODES_ETUDESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_MODE_ETUDE], [TYPE], [DESIGNATION], [DESIGNATION_LATIN], [CREDIT_TOTAL], [ANNEE_UNIVERSITAIRE], [NUMERO], [LastEditDate], [CreationDate] FROM dbo.MODES_ETUDES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "MODES_ETUDES";
        }
    }
    
    public partial class ENS_SPEMATSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ENS_SPEMATSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ENS_SPEMATSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.ENS_SPEMAT ([ID_ENSEIGNANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [LastEditDate], [CreationDate]) VALUES (@ID_ENSEIGNANT, @ANNEE_UNIVERSITAIRE, @ID_SPECIALITE, @ID_MATIERE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ENS_SPEMATSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.ENS_SPEMAT WHERE ([ID_ENSEIGNANT] = @ID_ENSEIGNANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ENS_SPEMATSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.ENS_SPEMAT SET [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_ENSEIGNANT] = @ID_ENSEIGNANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MATIERE] = @ID_MATIERE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ENS_SPEMATSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ENSEIGNANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [LastEditDate], [CreationDate] FROM dbo.ENS_SPEMAT WHERE ([ID_ENSEIGNANT] = @ID_ENSEIGNANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_MATIERE] = @ID_MATIERE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ENSEIGNANT", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            // ENS_SPEMATSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ID_ENSEIGNANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [La" +
                "stEditDate], [CreationDate] FROM dbo.ENS_SPEMAT WHERE ([CreationDate] > @sync_la" +
                "st_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ENS_SPEMATSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ENSEIGNANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_MATIERE], [LastEditDate], [CreationDate] FROM dbo.ENS_SPEMAT WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "ENS_SPEMAT";
        }
    }
    
    public partial class USERS_SPECIALITESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public USERS_SPECIALITESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // USERS_SPECIALITESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.USERS_SPECIALITES ([ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_USER], [ID_MATIERE], [ID_GROUPE], [LastEditDate], [CreationDate]) VALUES (@ANNEE_UNIVERSITAIRE, @ID_SPECIALITE, @ID_USER, @ID_MATIERE, @ID_GROUPE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // USERS_SPECIALITESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = @"DELETE FROM dbo.USERS_SPECIALITES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_USER] = @ID_USER AND [ID_MATIERE] = @ID_MATIERE AND [ID_GROUPE] = @ID_GROUPE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // USERS_SPECIALITESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.USERS_SPECIALITES SET [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_USER] = @ID_USER AND [ID_MATIERE] = @ID_MATIERE AND [ID_GROUPE] = @ID_GROUPE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // USERS_SPECIALITESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_USER], [ID_MATIERE], [ID_GROUPE], [LastEditDate], [CreationDate] FROM dbo.USERS_SPECIALITES WHERE ([ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE AND [ID_SPECIALITE] = @ID_SPECIALITE AND [ID_USER] = @ID_USER AND [ID_MATIERE] = @ID_MATIERE AND [ID_GROUPE] = @ID_GROUPE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            // USERS_SPECIALITESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = "SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_USER], [ID_MATIERE], [ID_GROUP" +
                "E], [LastEditDate], [CreationDate] FROM dbo.USERS_SPECIALITES WHERE ([CreationDa" +
                "te] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor" +
                ")";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // USERS_SPECIALITESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ID_USER], [ID_MATIERE], [ID_GROUPE], [LastEditDate], [CreationDate] FROM dbo.USERS_SPECIALITES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "USERS_SPECIALITES";
        }
    }
    
    public partial class ETUDESSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public ETUDESSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // ETUDESSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.ETUDES ([ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ETAT_ETUDIANT], [ID_SECTION], [ID_GROUPE], [MOYENNE_JUIN], [RATTRAPAGE], [MOYENNE_SEPT], [RESULTAT], [RANG], [NIVEAU], [MOYENNE_PASSAGE], [CLASSEMENT], [DOCUMENT_REMIS], [RACHETE], [ETAT_PRECEDENT], [MOYENNE_GENERALE], [NOTE_ASSIDUITE], [MOYENNE_EXAMEN_SORTIE], [MOYENNE_GENERALE_NOTATION_LETTRE], [LastEditDate], [CreationDate]) VALUES (@ID_ETUDIANT, @ANNEE_UNIVERSITAIRE, @ID_SPECIALITE, @ETAT_ETUDIANT, @ID_SECTION, @ID_GROUPE, @MOYENNE_JUIN, @RATTRAPAGE, @MOYENNE_SEPT, @RESULTAT, @RANG, @NIVEAU, @MOYENNE_PASSAGE, @CLASSEMENT, @DOCUMENT_REMIS, @RACHETE, @ETAT_PRECEDENT, @MOYENNE_GENERALE, @NOTE_ASSIDUITE, @MOYENNE_EXAMEN_SORTIE, @MOYENNE_GENERALE_NOTATION_LETTRE, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_ETUDIANT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_JUIN", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_SEPT", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RESULTAT", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RANG", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NIVEAU", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_PASSAGE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLASSEMENT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DOCUMENT_REMIS", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RACHETE", System.Data.SqlDbType.Bit));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_PRECEDENT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_ASSIDUITE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_EXAMEN_SORTIE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE_NOTATION_LETTRE", System.Data.SqlDbType.Float));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // ETUDESSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.ETUDES WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAI" +
                "RE] = @ANNEE_UNIVERSITAIRE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sy" +
                "nc_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // ETUDESSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.ETUDES SET [ID_SPECIALITE] = @ID_SPECIALITE, [ETAT_ETUDIANT] = @ETAT_ETUDIANT, [ID_SECTION] = @ID_SECTION, [ID_GROUPE] = @ID_GROUPE, [MOYENNE_JUIN] = @MOYENNE_JUIN, [RATTRAPAGE] = @RATTRAPAGE, [MOYENNE_SEPT] = @MOYENNE_SEPT, [RESULTAT] = @RESULTAT, [RANG] = @RANG, [NIVEAU] = @NIVEAU, [MOYENNE_PASSAGE] = @MOYENNE_PASSAGE, [CLASSEMENT] = @CLASSEMENT, [DOCUMENT_REMIS] = @DOCUMENT_REMIS, [RACHETE] = @RACHETE, [ETAT_PRECEDENT] = @ETAT_PRECEDENT, [MOYENNE_GENERALE] = @MOYENNE_GENERALE, [NOTE_ASSIDUITE] = @NOTE_ASSIDUITE, [MOYENNE_EXAMEN_SORTIE] = @MOYENNE_EXAMEN_SORTIE, [MOYENNE_GENERALE_NOTATION_LETTRE] = @MOYENNE_GENERALE_NOTATION_LETTRE, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SPECIALITE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_ETUDIANT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_SECTION", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_GROUPE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_JUIN", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RATTRAPAGE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_SEPT", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RESULTAT", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RANG", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NIVEAU", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_PASSAGE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CLASSEMENT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DOCUMENT_REMIS", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RACHETE", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_PRECEDENT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOTE_ASSIDUITE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_EXAMEN_SORTIE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MOYENNE_GENERALE_NOTATION_LETTRE", System.Data.SqlDbType.Float));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // ETUDESSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ETAT_ETUDIANT], [ID_SECTION], [ID_GROUPE], [MOYENNE_JUIN], [RATTRAPAGE], [MOYENNE_SEPT], [RESULTAT], [RANG], [NIVEAU], [MOYENNE_PASSAGE], [CLASSEMENT], [DOCUMENT_REMIS], [RACHETE], [ETAT_PRECEDENT], [MOYENNE_GENERALE], [NOTE_ASSIDUITE], [MOYENNE_EXAMEN_SORTIE], [MOYENNE_STAGE], [CREDIT], [POINTS], [MOYENNE_GENERALE_NOTATION_LETTRE], [LastEditDate], [CreationDate] FROM dbo.ETUDES WHERE ([ID_ETUDIANT] = @ID_ETUDIANT AND [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            // ETUDESSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ETAT_ETUDIANT], [ID_SECTION], [ID_GROUPE], [MOYENNE_JUIN], [RATTRAPAGE], [MOYENNE_SEPT], [RESULTAT], [RANG], [NIVEAU], [MOYENNE_PASSAGE], [CLASSEMENT], [DOCUMENT_REMIS], [RACHETE], [ETAT_PRECEDENT], [MOYENNE_GENERALE], [NOTE_ASSIDUITE], [MOYENNE_EXAMEN_SORTIE], [MOYENNE_STAGE], [CREDIT], [POINTS], [MOYENNE_GENERALE_NOTATION_LETTRE], [LastEditDate], [CreationDate] FROM dbo.ETUDES WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // ETUDESSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_ETUDIANT], [ANNEE_UNIVERSITAIRE], [ID_SPECIALITE], [ETAT_ETUDIANT], [ID_SECTION], [ID_GROUPE], [MOYENNE_JUIN], [RATTRAPAGE], [MOYENNE_SEPT], [RESULTAT], [RANG], [NIVEAU], [MOYENNE_PASSAGE], [CLASSEMENT], [DOCUMENT_REMIS], [RACHETE], [ETAT_PRECEDENT], [MOYENNE_GENERALE], [NOTE_ASSIDUITE], [MOYENNE_EXAMEN_SORTIE], [MOYENNE_STAGE], [CREDIT], [POINTS], [MOYENNE_GENERALE_NOTATION_LETTRE], [LastEditDate], [CreationDate] FROM dbo.ETUDES WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "ETUDES";
        }
    }
    
    public partial class LOGSyncAdapter : Microsoft.Synchronization.Data.Server.SyncAdapter {
        
        partial void OnInitialized();
        
        public LOGSyncAdapter() {
            this.InitializeCommands();
            this.InitializeAdapterProperties();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeCommands() {
            // LOGSyncTableInsertCommand command.
            this.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this.InsertCommand.CommandText = @"INSERT INTO dbo.[LOG] ([ID_LOG], [ID_USER], [ID_ETUDIANT], [JOUR], [OPERATION], [ANNEE_UNIVERSITAIRE], [MODULE], [ID_MATIERE], [DETAILS], [LastEditDate], [CreationDate]) VALUES (@ID_LOG, @ID_USER, @ID_ETUDIANT, @JOUR, @OPERATION, @ANNEE_UNIVERSITAIRE, @MODULE, @ID_MATIERE, @DETAILS, @LastEditDate, @CreationDate) SET @sync_row_count = @@rowcount";
            this.InsertCommand.CommandType = System.Data.CommandType.Text;
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_LOG", System.Data.SqlDbType.UniqueIdentifier));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JOUR", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OPERATION", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MODULE", System.Data.SqlDbType.VarChar));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DETAILS", System.Data.SqlDbType.Text));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter insertcommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            insertcommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.InsertCommand.Parameters.Add(insertcommand_sync_row_countParameter);
            // LOGSyncTableDeleteCommand command.
            this.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this.DeleteCommand.CommandText = "DELETE FROM dbo.[LOG] WHERE ([ID_LOG] = @ID_LOG) AND (@sync_force_write = 1 OR ([" +
                "LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_LOG", System.Data.SqlDbType.UniqueIdentifier));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter deletecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            deletecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.DeleteCommand.Parameters.Add(deletecommand_sync_row_countParameter);
            // LOGSyncTableUpdateCommand command.
            this.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this.UpdateCommand.CommandText = @"UPDATE dbo.[LOG] SET [ID_USER] = @ID_USER, [ID_ETUDIANT] = @ID_ETUDIANT, [JOUR] = @JOUR, [OPERATION] = @OPERATION, [ANNEE_UNIVERSITAIRE] = @ANNEE_UNIVERSITAIRE, [MODULE] = @MODULE, [ID_MATIERE] = @ID_MATIERE, [DETAILS] = @DETAILS, [LastEditDate] = @LastEditDate, [CreationDate] = @CreationDate WHERE ([ID_LOG] = @ID_LOG) AND (@sync_force_write = 1 OR ([LastEditDate] <= @sync_last_received_anchor)) SET @sync_row_count = @@rowcount";
            this.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_USER", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_ETUDIANT", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JOUR", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OPERATION", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNEE_UNIVERSITAIRE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MODULE", System.Data.SqlDbType.VarChar));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_MATIERE", System.Data.SqlDbType.Int));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DETAILS", System.Data.SqlDbType.Text));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastEditDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreationDate", System.Data.SqlDbType.DateTime));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_LOG", System.Data.SqlDbType.UniqueIdentifier));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_force_write", System.Data.SqlDbType.Bit));
            this.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            System.Data.SqlClient.SqlParameter updatecommand_sync_row_countParameter = new System.Data.SqlClient.SqlParameter("@sync_row_count", System.Data.SqlDbType.Int);
            updatecommand_sync_row_countParameter.Direction = System.Data.ParameterDirection.Output;
            this.UpdateCommand.Parameters.Add(updatecommand_sync_row_countParameter);
            // LOGSyncTableSelectConflictUpdatedRowsCommand command.
            this.SelectConflictUpdatedRowsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectConflictUpdatedRowsCommand.CommandText = "SELECT [ID_LOG], [ID_USER], [ID_ETUDIANT], [JOUR], [OPERATION], [ANNEE_UNIVERSITA" +
                "IRE], [MODULE], [ID_MATIERE], [DETAILS], [LastEditDate], [CreationDate] FROM dbo" +
                ".[LOG] WHERE ([ID_LOG] = @ID_LOG)";
            this.SelectConflictUpdatedRowsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectConflictUpdatedRowsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ID_LOG", System.Data.SqlDbType.UniqueIdentifier));
            // LOGSyncTableSelectIncrementalInsertsCommand command.
            this.SelectIncrementalInsertsCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalInsertsCommand.CommandText = @"SELECT [ID_LOG], [ID_USER], [ID_ETUDIANT], [JOUR], [OPERATION], [ANNEE_UNIVERSITAIRE], [MODULE], [ID_MATIERE], [DETAILS], [LastEditDate], [CreationDate] FROM dbo.[LOG] WHERE ([CreationDate] > @sync_last_received_anchor AND [CreationDate] <= @sync_new_received_anchor)";
            this.SelectIncrementalInsertsCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalInsertsCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
            // LOGSyncTableSelectIncrementalUpdatesCommand command.
            this.SelectIncrementalUpdatesCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectIncrementalUpdatesCommand.CommandText = @"SELECT [ID_LOG], [ID_USER], [ID_ETUDIANT], [JOUR], [OPERATION], [ANNEE_UNIVERSITAIRE], [MODULE], [ID_MATIERE], [DETAILS], [LastEditDate], [CreationDate] FROM dbo.[LOG] WHERE ([LastEditDate] > @sync_last_received_anchor AND [LastEditDate] <= @sync_new_received_anchor AND [CreationDate] <= @sync_last_received_anchor)";
            this.SelectIncrementalUpdatesCommand.CommandType = System.Data.CommandType.Text;
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_last_received_anchor", System.Data.SqlDbType.DateTime));
            this.SelectIncrementalUpdatesCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeAdapterProperties() {
            this.TableName = "LOG";
        }
    }
    
    public partial class ESCLocalDbServerSyncProvider : Microsoft.Synchronization.Data.Server.DbServerSyncProvider {
        
        private ANNEESSyncAdapter _aNNEESSyncAdapter;
        
        private CATEGORIESSyncAdapter _cATEGORIESSyncAdapter;
        
        private ENSEIGNANTSSyncAdapter _eNSEIGNANTSSyncAdapter;
        
        private ETUDIANTSSyncAdapter _eTUDIANTSSyncAdapter;
        
        private EXAMENSSyncAdapter _eXAMENSSyncAdapter;
        
        private EXAMENS_ANNEES_MODES_ETUDESSyncAdapter _eXAMENS_ANNEES_MODES_ETUDESSyncAdapter;
        
        private GROUPESSyncAdapter _gROUPESSyncAdapter;
        
        private MATIERESSyncAdapter _mATIERESSyncAdapter;
        
        private NOTESyncAdapter _nOTESyncAdapter;
        
        private NOTE_DETTESyncAdapter _nOTE_DETTESyncAdapter;
        
        private NOTES_EXAMENSyncAdapter _nOTES_EXAMENSyncAdapter;
        
        private SECTIONSSyncAdapter _sECTIONSSyncAdapter;
        
        private SPECIALITESSyncAdapter _sPECIALITESSyncAdapter;
        
        private SPECIALITES_ANNEES_MODES_ETUDESSyncAdapter _sPECIALITES_ANNEES_MODES_ETUDESSyncAdapter;
        
        private SPECIALITES_MATIERESSyncAdapter _sPECIALITES_MATIERESSyncAdapter;
        
        private MODES_ETUDESSyncAdapter _mODES_ETUDESSyncAdapter;
        
        private ENS_SPEMATSyncAdapter _eNS_SPEMATSyncAdapter;
        
        private USERS_SPECIALITESSyncAdapter _uSERS_SPECIALITESSyncAdapter;
        
        private ETUDESSyncAdapter _eTUDESSyncAdapter;
        
        private LOGSyncAdapter _lOGSyncAdapter;
        
        partial void OnInitialized();
        
        public ESCLocalDbServerSyncProvider() {
            string connectionString = global::OfflineTeacher_DBProject.Properties.Settings.Default.ServerSGSDBConnectionString;
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        public ESCLocalDbServerSyncProvider(string connectionString) {
            this.InitializeConnection(connectionString);
            this.InitializeSyncAdapters();
            this.InitializeNewAnchorCommand();
            this.OnInitialized();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ANNEESSyncAdapter ANNEESSyncAdapter {
            get {
                return this._aNNEESSyncAdapter;
            }
            set {
                this._aNNEESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CATEGORIESSyncAdapter CATEGORIESSyncAdapter {
            get {
                return this._cATEGORIESSyncAdapter;
            }
            set {
                this._cATEGORIESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ENSEIGNANTSSyncAdapter ENSEIGNANTSSyncAdapter {
            get {
                return this._eNSEIGNANTSSyncAdapter;
            }
            set {
                this._eNSEIGNANTSSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ETUDIANTSSyncAdapter ETUDIANTSSyncAdapter {
            get {
                return this._eTUDIANTSSyncAdapter;
            }
            set {
                this._eTUDIANTSSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EXAMENSSyncAdapter EXAMENSSyncAdapter {
            get {
                return this._eXAMENSSyncAdapter;
            }
            set {
                this._eXAMENSSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EXAMENS_ANNEES_MODES_ETUDESSyncAdapter EXAMENS_ANNEES_MODES_ETUDESSyncAdapter {
            get {
                return this._eXAMENS_ANNEES_MODES_ETUDESSyncAdapter;
            }
            set {
                this._eXAMENS_ANNEES_MODES_ETUDESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GROUPESSyncAdapter GROUPESSyncAdapter {
            get {
                return this._gROUPESSyncAdapter;
            }
            set {
                this._gROUPESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MATIERESSyncAdapter MATIERESSyncAdapter {
            get {
                return this._mATIERESSyncAdapter;
            }
            set {
                this._mATIERESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOTESyncAdapter NOTESyncAdapter {
            get {
                return this._nOTESyncAdapter;
            }
            set {
                this._nOTESyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOTE_DETTESyncAdapter NOTE_DETTESyncAdapter {
            get {
                return this._nOTE_DETTESyncAdapter;
            }
            set {
                this._nOTE_DETTESyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NOTES_EXAMENSyncAdapter NOTES_EXAMENSyncAdapter {
            get {
                return this._nOTES_EXAMENSyncAdapter;
            }
            set {
                this._nOTES_EXAMENSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SECTIONSSyncAdapter SECTIONSSyncAdapter {
            get {
                return this._sECTIONSSyncAdapter;
            }
            set {
                this._sECTIONSSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIALITESSyncAdapter SPECIALITESSyncAdapter {
            get {
                return this._sPECIALITESSyncAdapter;
            }
            set {
                this._sPECIALITESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIALITES_ANNEES_MODES_ETUDESSyncAdapter SPECIALITES_ANNEES_MODES_ETUDESSyncAdapter {
            get {
                return this._sPECIALITES_ANNEES_MODES_ETUDESSyncAdapter;
            }
            set {
                this._sPECIALITES_ANNEES_MODES_ETUDESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SPECIALITES_MATIERESSyncAdapter SPECIALITES_MATIERESSyncAdapter {
            get {
                return this._sPECIALITES_MATIERESSyncAdapter;
            }
            set {
                this._sPECIALITES_MATIERESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MODES_ETUDESSyncAdapter MODES_ETUDESSyncAdapter {
            get {
                return this._mODES_ETUDESSyncAdapter;
            }
            set {
                this._mODES_ETUDESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ENS_SPEMATSyncAdapter ENS_SPEMATSyncAdapter {
            get {
                return this._eNS_SPEMATSyncAdapter;
            }
            set {
                this._eNS_SPEMATSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USERS_SPECIALITESSyncAdapter USERS_SPECIALITESSyncAdapter {
            get {
                return this._uSERS_SPECIALITESSyncAdapter;
            }
            set {
                this._uSERS_SPECIALITESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ETUDESSyncAdapter ETUDESSyncAdapter {
            get {
                return this._eTUDESSyncAdapter;
            }
            set {
                this._eTUDESSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LOGSyncAdapter LOGSyncAdapter {
            get {
                return this._lOGSyncAdapter;
            }
            set {
                this._lOGSyncAdapter = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeConnection(string connectionString) {
            this.Connection = new System.Data.SqlClient.SqlConnection(connectionString);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeSyncAdapters() {
            // Create SyncAdapters.
            this._aNNEESSyncAdapter = new ANNEESSyncAdapter();
            this.SyncAdapters.Add(this._aNNEESSyncAdapter);
            this._cATEGORIESSyncAdapter = new CATEGORIESSyncAdapter();
            this.SyncAdapters.Add(this._cATEGORIESSyncAdapter);
            this._eNSEIGNANTSSyncAdapter = new ENSEIGNANTSSyncAdapter();
            this.SyncAdapters.Add(this._eNSEIGNANTSSyncAdapter);
            this._eTUDIANTSSyncAdapter = new ETUDIANTSSyncAdapter();
            this.SyncAdapters.Add(this._eTUDIANTSSyncAdapter);
            this._eXAMENSSyncAdapter = new EXAMENSSyncAdapter();
            this.SyncAdapters.Add(this._eXAMENSSyncAdapter);
            this._eXAMENS_ANNEES_MODES_ETUDESSyncAdapter = new EXAMENS_ANNEES_MODES_ETUDESSyncAdapter();
            this.SyncAdapters.Add(this._eXAMENS_ANNEES_MODES_ETUDESSyncAdapter);
            this._gROUPESSyncAdapter = new GROUPESSyncAdapter();
            this.SyncAdapters.Add(this._gROUPESSyncAdapter);
            this._mATIERESSyncAdapter = new MATIERESSyncAdapter();
            this.SyncAdapters.Add(this._mATIERESSyncAdapter);
            this._nOTESyncAdapter = new NOTESyncAdapter();
            this.SyncAdapters.Add(this._nOTESyncAdapter);
            this._nOTE_DETTESyncAdapter = new NOTE_DETTESyncAdapter();
            this.SyncAdapters.Add(this._nOTE_DETTESyncAdapter);
            this._nOTES_EXAMENSyncAdapter = new NOTES_EXAMENSyncAdapter();
            this.SyncAdapters.Add(this._nOTES_EXAMENSyncAdapter);
            this._sECTIONSSyncAdapter = new SECTIONSSyncAdapter();
            this.SyncAdapters.Add(this._sECTIONSSyncAdapter);
            this._sPECIALITESSyncAdapter = new SPECIALITESSyncAdapter();
            this.SyncAdapters.Add(this._sPECIALITESSyncAdapter);
            this._sPECIALITES_ANNEES_MODES_ETUDESSyncAdapter = new SPECIALITES_ANNEES_MODES_ETUDESSyncAdapter();
            this.SyncAdapters.Add(this._sPECIALITES_ANNEES_MODES_ETUDESSyncAdapter);
            this._sPECIALITES_MATIERESSyncAdapter = new SPECIALITES_MATIERESSyncAdapter();
            this.SyncAdapters.Add(this._sPECIALITES_MATIERESSyncAdapter);
            this._mODES_ETUDESSyncAdapter = new MODES_ETUDESSyncAdapter();
            this.SyncAdapters.Add(this._mODES_ETUDESSyncAdapter);
            this._eNS_SPEMATSyncAdapter = new ENS_SPEMATSyncAdapter();
            this.SyncAdapters.Add(this._eNS_SPEMATSyncAdapter);
            this._uSERS_SPECIALITESSyncAdapter = new USERS_SPECIALITESSyncAdapter();
            this.SyncAdapters.Add(this._uSERS_SPECIALITESSyncAdapter);
            this._eTUDESSyncAdapter = new ETUDESSyncAdapter();
            this.SyncAdapters.Add(this._eTUDESSyncAdapter);
            this._lOGSyncAdapter = new LOGSyncAdapter();
            this.SyncAdapters.Add(this._lOGSyncAdapter);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitializeNewAnchorCommand() {
            // selectNewAnchorCmd command.
            this.SelectNewAnchorCommand = new System.Data.SqlClient.SqlCommand();
            this.SelectNewAnchorCommand.CommandText = "Select @sync_new_received_anchor = GETUTCDATE()";
            this.SelectNewAnchorCommand.CommandType = System.Data.CommandType.Text;
            System.Data.SqlClient.SqlParameter selectnewanchorcommand_sync_new_received_anchorParameter = new System.Data.SqlClient.SqlParameter("@sync_new_received_anchor", System.Data.SqlDbType.DateTime);
            selectnewanchorcommand_sync_new_received_anchorParameter.Direction = System.Data.ParameterDirection.Output;
            this.SelectNewAnchorCommand.Parameters.Add(selectnewanchorcommand_sync_new_received_anchorParameter);
        }
    }
}
